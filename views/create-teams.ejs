<%- include('partials/header-2', { title: 'create-teams' }) %>

<!-- Include any additional CSS files here -->
<style>
  .large-font {
    font-size: 1.5rem;
  }

  .heading-font {
    font-size: 3rem;
  }

  .taller-box {
    min-height: 600px;
    padding: 3rem;
    display: flex;
    flex-direction: column;
    justify-content: space-between;
  }

  .card {
    flex-grow: 1;
    width: 70%;
    padding: 5rem;
    display: flex;
    flex-direction: column;
    justify-content: space-between;
  }

  .form-group {
    margin-bottom: 1.5rem;
  }

  .checkbox-group {
    max-height: 300px;
    overflow-y: auto;
    border: 1px solid #ccc;
    padding: 10px;
    background-color: white;
  }

  .form-label {
    font-size: 1.5rem;
  }

  .checkbox-group label {
    font-size: 1.05rem;
  }

  .btn-submit {
    font-size: 20px;
  }

  /* Styles for the confirmation message */
  #confirmationMessage {
    display: none;
    background-color: #d4edda;
    color: #155724;
    border: 1px solid #c3e6cb;
    border-radius: 5px;
    padding: 10px;
    margin-top: 20px;
    text-align: center;
  }

  /* Styles for the error messages */
  .error-message {
    display: none;
    color: red;
    margin-top: 10px;
    text-align: left;
  }
</style>

<!-- Container to center the form vertically and horizontally -->
<div class="container m-5 d-flex justify-content-center align-items-center">
  <div class="vh-50 d-flex justify-content-center align-items-center" style="width:70%">
    <div class="row justify-content-center w-100">
      <!-- Card to create a grey box with rounded edges and taller height -->
      <div class="card bg-light rounded taller-box">
        <h2 class="text-center heading-font">Create Teams</h2>
        <form
          id="createTeamForm"
          action="/create-teams"
          method="POST"
          enctype="multipart/form-data"
          class="large-font"
        >
          <!-- Form group for team name input -->
          <div class="form-group mx-5 my-4">
            <label for="teamName" class="form-label">Team Name</label>
            <input
              type="text"
              name="teamname"
              class="form-control"
              id="teamname"
              placeholder="Enter team name"
              pattern="[A-Za-z0-9 ]+"
              title="Please provide a valid name for the team (only letters, numbers, and spaces are allowed)"
            />
          </div>

          <!-- Form group for selecting a random number of students -->
          <div class="form-group mx-5 my-4">
            <label for="teamName" class="form-label">Number of Members</label>
            <div class="d-block">
              
              <input
                type="number"
                class="form-control d-inline w-50 ml-1 mr-1"
                id="teamNumber"
                placeholder="Enter Number of Members"
                min="1"
              />
              </div>

          <!-- Form group for selecting students -->
          <div class="form-group  my-4">
            <label for="students" class="form-label"
              >List of Students (<span id="selectedCount">0</span>
              selected)</label
            >
            <input
              type="text"
              class="form-control mb-2"
              placeholder="Search for students"
              id="searchStudents"
              onkeyup="filterStudents()"
            />
            <label for="students" class="form-label">List of Students (<span id="selectedCount">0</span> selected)</label>
              <input type="text" class="form-control mb-2" placeholder="Search for students" id="searchStudents" onkeyup="filterStudents()">
              <div id="checkboxGroup" class="checkbox-group">
                <% if (StudentArr.rows.length > 0) { %>
                  <!--<form action="/create-teams" method="POST">-->
                    <!--<label for="teamname">Team Name:</label>
                    <input type="text" name="teamname" id="teamname" />-->
                    <table>
                        <tr>
                            <th>Student Name</th>
                            <th>Student ID</th>
                            <th>Enroll</th>
                        </tr>
                        <% for (var i = 0; i < StudentArr.rows.length; i++) { %>
                            <tr>
                                <td><label for="student_<%= StudentArr.rows[i].name %>"><%= StudentArr.rows[i].name %></label></td>
                                <td><%= StudentArr.rows[i].id %></td>
                                <td><input type="checkbox" name="studentIDs" value="<%= StudentArr.rows[i].id %>">
                                </td>
                            </tr>
                        <% } %>
                    </table>
                <% } else { %>
                  <div>No students found</div>
                <% } %>
              </div>
            <button
              type="button"
              class="btn btn-outline-danger mt-2 d-inline"
              onclick="uncheckSelectedStudents()">
              Uncheck Selection
            </button>
            <button
            type="button"
            class="btn btn-outline-success mt-2 d-inline mr-2"
            onclick="selectRandomStudents()">
            Select Random Students
          </button>
          
          <div
            id="notEnoughStudentsError"
            class="error-message"
            style="display: none; color: red"
          >
            Not enough students
          </div>
        </div>
        
            <!-- Error message for no students selected -->
            <div
              id="studentsError"
              class="error-message"
              style="display: none; color: red"
            >
              Please assign students to the team
            </div>
          </div>

          <!-- CSV upload option -->
          <div class="form-group m-5">
            <label for="csvfile">Upload CSV File (Optional):</label>
            <input type="file" name="csvfile" id="csvfile" accept=".csv" />
          </div>

          <!-- Confirmation message -->
          <div id="confirmationMessage" style="display: none">
            Team created successfully!
          </div>

          <!-- Submit button -->
          <button
            type="submit"
            class="btn btn-primary btn-submit mt-3 m-5 mb-2"
          >
            Submit
          </button>
        </form>
      </div>
    </div>
  </div>
</div>


<script>
  // Function to filter students based on search input
  function filterStudents() {
    const searchInput = document
      .getElementById("searchStudents")
      .value.toLowerCase();
    const checkboxes = document
      .getElementById("checkboxGroup")
      .querySelectorAll("div");

    checkboxes.forEach((checkbox) => {
      const label = checkbox.querySelector("label").innerText.toLowerCase();
      checkbox.style.display = label.includes(searchInput) ? "" : "none";
    });
  }

  // Function to update the count of selected students
  function updateSelectedCount() {
    const selectedCount = document.querySelectorAll(
      "#checkboxGroup input:checked"
    ).length;
    document.getElementById("selectedCount").innerText = selectedCount;
  }

  // Function to randomly select the specified number of students
  function selectRandomStudents() {
    const teamNumber = parseInt(
      document.getElementById("teamNumber").value,
      10
    );
    const checkboxes = document.querySelectorAll("#checkboxGroup input");
    const uncheckedBoxes = Array.from(checkboxes);

    // Uncheck all students first
    uncheckedBoxes.forEach((box) => (box.checked = false));

    if (
      isNaN(teamNumber) ||
      teamNumber < 1 ||
      teamNumber > uncheckedBoxes.length
    ) {
      document.getElementById("notEnoughStudentsError").style.display = "block";
      return;
    } else {
      document.getElementById("notEnoughStudentsError").style.display = "none";
    }

    // Shuffle the checkboxes and select the specified number of students
    uncheckedBoxes.sort(() => Math.random() - 0.5);
    uncheckedBoxes.slice(0, teamNumber).forEach((box) => (box.checked = true));

    // Update the selected count
    updateSelectedCount();
  }

  // Function to uncheck all selected students
  function uncheckSelectedStudents() {
    const checkboxes = document.querySelectorAll(
      "#checkboxGroup input:checked"
    );
    checkboxes.forEach((box) => (box.checked = false));

    // Update the selected count
    updateSelectedCount();
  }

  // Function to validate the form inputs
  function validateForm() {
    const teamName = document.getElementById("teamName").value;
    const checkedStudents = document.querySelectorAll(
      "#checkboxGroup input:checked"
    );
    const selectedStudents = Array.from(checkedStudents).map(
      (input) => input.value
    );

    // Check if team name is provided
    if (!teamName) {
      document.getElementById("teamNameError").style.display = "block";
    } else {
      document.getElementById("teamNameError").style.display = "none";
    }

    // Check if at least one student is selected
    if (selectedStudents.length === 0) {
      document.getElementById("studentsError").style.display = "block";
    } else {
      document.getElementById("studentsError").style.display = "none";
    }

    // If validation passes, show confirmation message
    if (teamName && selectedStudents.length > 0) {
      const confirmationMessage = document.getElementById(
        "confirmationMessage"
      );
      confirmationMessage.style.display = "block";

      // Hide the message after 3 seconds
      setTimeout(() => {
        confirmationMessage.style.display = "none";
      }, 3000);
    }
  }

  // // Disable the submit button if no students are available
  // document.addEventListener("DOMContentLoaded", function() {
  //       document.querySelector('button[type="submit"]').disabled = true;
  // });

  // Handle empty team name input
  document.addEventListener("DOMContentLoaded", function () {
    const teamNameInput = document.getElementById("teamname");

    // Listen for the 'input' event to reset the message once the user starts typing
    teamNameInput.addEventListener("input", function () {
      teamNameInput.setCustomValidity("");
    });

    // Listen for the 'invalid' event to set the custom message
    teamNameInput.addEventListener("invalid", function () {
      if (!teamNameInput.validity.valid) {
        teamNameInput.setCustomValidity("Please provide a name for the team");
      }
    });
  });
</script>
<%- include('partials/footer') %>
