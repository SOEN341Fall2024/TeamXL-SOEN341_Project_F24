<%- include('partials/header', { title: 'create-teams' }) %>
<div>
<header>
  <div class="px-3 py-2 text-bg-dark border-bottom">
    <div class="mx-2">
      <div class="d-flex flex-wrap align-items-center justify-content-center justify-content-lg-start">
        <a href="/instructor-dashboard" class="d-flex align-items-center justify-content-start my-lg-0 me-lg-auto text-white text-decoration-none">
          <svg class="mx-3" xmlns="http://www.w3.org/2000/svg" width="50" height="50" fill="currentColor" class="bi bi-puzzle" viewBox="0 0 16 16">
            <path d="M3.112 3.645A1.5 1.5 0 0 1 4.605 2H7a.5.5 0 0 1 .5.5v.382c0 .696-.497 1.182-.872 1.469a.5.5 0 0 0-.115.118l-.012.025L6.5 4.5v.003l.003.01q.005.015.036.053a.9.9 0 0 0 .27.194C7.09 4.9 7.51 5 8 5c.492 0 .912-.1 1.19-.24a.9.9 0 0 0 .271-.194.2.2 0 0 0 .039-.063v-.009l-.012-.025a.5.5 0 0 0-.115-.118c-.375-.287-.872-.773-.872-1.469V2.5A.5.5 0 0 1 9 2h2.395a1.5 1.5 0 0 1 1.493 1.645L12.645 6.5h.237c.195 0 .42-.147.675-.48.21-.274.528-.52.943-.52.568 0 .947.447 1.154.862C15.877 6.807 16 7.387 16 8s-.123 1.193-.346 1.638c-.207.415-.586.862-1.154.862-.415 0-.733-.246-.943-.52-.255-.333-.48-.48-.675-.48h-.237l.243 2.855A1.5 1.5 0 0 1 11.395 14H9a.5.5 0 0 1-.5-.5v-.382c0-.696.497-1.182.872-1.469a.5.5 0 0 0 .115-.118l.012-.025.001-.006v-.003a.2.2 0 0 0-.039-.064.9.9 0 0 0-.27-.193C8.91 11.1 8.49 11 8 11s-.912.1-1.19.24a.9.9 0 0 0-.271.194.2.2 0 0 0-.039.063v.003l.001.006.012.025c.016.027.05.068.115.118.375.287.872.773.872 1.469v.382a.5.5 0 0 1-.5.5H4.605a1.5 1.5 0 0 1-1.493-1.645L3.356 9.5h-.238c-.195 0-.42.147-.675.48-.21.274-.528.52-.943.52-.568 0-.947-.447-1.154-.862C.123 9.193 0 8.613 0 8s.123-1.193.346-1.638C.553 5.947.932 5.5 1.5 5.5c.415 0 .733.246.943.52.255.333.48.48.675.48h.238zM4.605 3a.5.5 0 0 0-.498.55l.001.007.29 3.4A.5.5 0 0 1 3.9 7.5h-.782c-.696 0-1.182-.497-1.469-.872a.5.5 0 0 0-.118-.115l-.025-.012L1.5 6.5h-.003a.2.2 0 0 0-.064.039.9.9 0 0 0-.193.27C1.1 7.09 1 7.51 1 8s.1.912.24 1.19c.07.14.14.225.194.271a.2.2 0 0 0 .063.039H1.5l.006-.001.025-.012a.5.5 0 0 0 .118-.115c.287-.375.773-.872 1.469-.872H3.9a.5.5 0 0 1 .498.542l-.29 3.408a.5.5 0 0 0 .497.55h1.878c-.048-.166-.195-.352-.463-.557-.274-.21-.52-.528-.52-.943 0-.568.447-.947.862-1.154C6.807 10.123 7.387 10 8 10s1.193.123 1.638.346c.415.207.862.586.862 1.154 0 .415-.246.733-.52.943-.268.205-.415.39-.463.557h1.878a.5.5 0 0 0 .498-.55l-.001-.007-.29-3.4A.5.5 0 0 1 12.1 8.5h.782c.696 0 1.182.497 1.469.872.05.065.091.099.118.115l.025.012.006.001h.003a.2.2 0 0 0 .064-.039.9.9 0 0 0 .193-.27c.14-.28.24-.7.24-1.191s-.1-.912-.24-1.19a.9.9 0 0 0-.194-.271.2.2 0 0 0-.063-.039H14.5l-.006.001-.025.012a.5.5 0 0 0-.118.115c-.287.375-.773.872-1.469.872H12.1a.5.5 0 0 1-.498-.543l.29-3.407a.5.5 0 0 0-.497-.55H9.517c.048.166.195.352.463.557.274.21.52.528.52.943 0 .568-.447.947-.862 1.154C9.193 5.877 8.613 6 8 6s-1.193-.123-1.638-.346C5.947 5.447 5.5 5.068 5.5 4.5c0-.415.246-.733.52-.943.268-.205.415-.39.463-.557z"/>
          </svg>
          <h1>InsightSphere</h1>
        </a>

        <ul class="nav col-12 col-lg-auto my-2 justify-content-center my-md-0 text-small">
          <li>
            <a href="/instructor-dashboard" class="nav-link text-white">
              <svg class="bi d-block mx-auto mb-1" xmlns="http://www.w3.org/2000/svg" width="40" height="40" fill="currentColor" class="bi bi-speedometer2" viewBox="0 0 16 16">
                  <path d="M8 4a.5.5 0 0 1 .5.5V6a.5.5 0 0 1-1 0V4.5A.5.5 0 0 1 8 4M3.732 5.732a.5.5 0 0 1 .707 0l.915.914a.5.5 0 1 1-.708.708l-.914-.915a.5.5 0 0 1 0-.707M2 10a.5.5 0 0 1 .5-.5h1.586a.5.5 0 0 1 0 1H2.5A.5.5 0 0 1 2 10m9.5 0a.5.5 0 0 1 .5-.5h1.5a.5.5 0 0 1 0 1H12a.5.5 0 0 1-.5-.5m.754-4.246a.39.39 0 0 0-.527-.02L7.547 9.31a.91.91 0 1 0 1.302 1.258l3.434-4.297a.39.39 0 0 0-.029-.518z"/>
                  <path fill-rule="evenodd" d="M0 10a8 8 0 1 1 15.547 2.661c-.442 1.253-1.845 1.602-2.932 1.25C11.309 13.488 9.475 13 8 13c-1.474 0-3.31.488-4.615.911-1.087.352-2.49.003-2.932-1.25A8 8 0 0 1 0 10m8-7a7 7 0 0 0-6.603 9.329c.203.575.923.876 1.68.63C4.397 12.533 6.358 12 8 12s3.604.532 4.923.96c.757.245 1.477-.056 1.68-.631A7 7 0 0 0 8 3"/>
                </svg>
              Dashboard
            </a>
          </li>

          <li>
            <svg class="bi d-block mx-auto mb-1" xmlns="http://www.w3.org/2000/svg" width="40" height="40" fill="currentColor" class="bi bi-people" viewBox="0 0 16 16">
                <path d="M15 14s1 0 1-1-1-4-5-4-5 3-5 4 1 1 1 1zm-7.978-1L7 12.996c.001-.264.167-1.03.76-1.72C8.312 10.629 9.282 10 11 10c1.717 0 2.687.63 3.24 1.276.593.69.758 1.457.76 1.72l-.008.002-.014.002zM11 7a2 2 0 1 0 0-4 2 2 0 0 0 0 4m3-2a3 3 0 1 1-6 0 3 3 0 0 1 6 0M6.936 9.28a6 6 0 0 0-1.23-.247A7 7 0 0 0 5 9c-4 0-5 3-5 4q0 1 1 1h4.216A2.24 2.24 0 0 1 5 13c0-1.01.377-2.042 1.09-2.904.243-.294.526-.569.846-.816M4.92 10A5.5 5.5 0 0 0 4 13H1c0-.26.164-1.03.76-1.724.545-.636 1.492-1.256 3.16-1.275ZM1.5 5.5a3 3 0 1 1 6 0 3 3 0 0 1-6 0m3-2a2 2 0 1 0 0 4 2 2 0 0 0 0-4"/>
              </svg>
              <div class="btn-group">
                <button class="btn btn-dark btn-md dropdown-toggle" type="button" data-bs-toggle="dropdown" aria-expanded="false">
                  Peers
                </button>
                
                <ul class="dropdown-menu" style="">
                    <!-- The Three Buttons for Team Management -->
                  <li><a class="nav-link" href="/create-teams">Create Team</a></li>
                  <li><a class="dropdown-item" href="/view-teams">View Teams</a></li>
                  <li><a class="dropdown-item" href="/peer-assessment">Peer Assessment</a></li>
                </ul>
              </div>
          </li>

          <li class="nav-item dropdown">
            <a href="#" class="nav-link text-white dropdown-toggle" id="notificationsDropdown" role="button" data-bs-toggle="dropdown" aria-expanded="false">
              <svg class="bi d-block mx-auto mb-1" xmlns="http://www.w3.org/2000/svg" width="40" height="40" fill="currentColor" class="bi bi-chat-left-dots" viewBox="0 0 16 16">
                <path d="M14 1a1 1 0 0 1 1 1v8a1 1 0 0 1-1 1H4.414A2 2 0 0 0 3 11.586l-2 2V2a1 1 0 0 1 1-1zM2 0a2 2 0 0 0-2 2v12.793a.5.5 0 0 0 .854.353l2.853-2.853A1 1 0 0 1 4.414 12H14a2 2 0 0 0 2-2V2a2 2 0 0 0-2-2z"/>
                <path d="M5 6a1 1 0 1 1-2 0 1 1 0 0 1 2 0m4 0a1 1 0 1 1-2 0 1 1 0 0 1 2 0m4 0a1 1 0 1 1-2 0 1 1 0 0 1 2 0"/>
              </svg>
              Notifications
            </a>
          
            <!-- Dropdown Menu -->
            <ul class="dropdown-menu p-2" aria-labelledby="notificationsDropdown">
              <!-- Dropdown Items -->
              <li><a class="dropdown-item" href="/private-messages">Private messages</a></li>
              <li><a class="dropdown-item" href="/contacts">Contacts</a></li>
            </ul>
          </li>

          <li>
            <svg class="bi d-block mx-auto mb-1" xmlns="http://www.w3.org/2000/svg" width="40" height="40" fill="currentColor" class="bi bi-person-circle" viewBox="0 0 16 16">
              <path d="M11 6a3 3 0 1 1-6 0 3 3 0 0 1 6 0"/>
              <path fill-rule="evenodd" d="M0 8a8 8 0 1 1 16 0A8 8 0 0 1 0 8m8-7a7 7 0 0 0-5.468 11.37C3.242 11.226 4.805 10 8 10s4.757 1.225 5.468 2.37A7 7 0 0 0 8 1"/>
            </svg>
              <div class="btn-group">
                <button class="btn btn-dark btn-md dropdown-toggle" type="button" data-bs-toggle="dropdown" aria-expanded="false">
                  Account
                </button>
                
                <ul class="dropdown-menu">
                  <li><a class="dropdown-item" href="/profile">Profile</a></li>
                  <li><a class="dropdown-item" href="/logout">Logout</a></li>
                </ul>
              </div>
          </li>
        </ul>
      </div>
    </div>
  </div>
  
</header>
</div>
<!-- Include any additional CSS files here -->
<!-- <style>
  .large-font {
    font-size: 1.5rem;
  }

  .heading-font {
    font-size: 3rem;
  }

  .taller-box {
    min-height: 600px;
    padding: 3rem;
    display: flex;
    flex-direction: column;
    justify-content: space-between;
  }

  .card {
    flex-grow: 1;
    width: 70%;
    padding: 5rem;
    display: flex;
    flex-direction: column;
    justify-content: space-between;
  }

  .form-group {
    margin-bottom: 1.5rem;
  }

  .checkbox-group {
    max-height: 300px;
    overflow-y: auto;
    border: 1px solid #ccc;
    padding: 10px;
    background-color: white;
  }

  .form-label {
    font-size: 1.5rem;
  }

  .checkbox-group label {
    font-size: 1.05rem;
  }

  .btn-submit {
    font-size: 20px;
  }

  /* Styles for the confirmation message */
  #confirmationMessage {
    display: none;
    background-color: #d4edda;
    color: #155724;
    border: 1px solid #c3e6cb;
    border-radius: 5px;
    padding: 10px;
    margin-top: 20px;
    text-align: center;
  }

  /* Styles for the error messages */
  .error-message {
    display: none;
    color: red;
    margin-top: 10px;
    text-align: left;
  }
</style> -->

<!-- Container to center the form vertically and horizontally -->
<div class="container m-5 d-flex justify-content-center align-items-center">
  <div class="vh-50 d-flex justify-content-center align-items-center" style="width:70%">
    <div class="row justify-content-center w-100">
      <!-- Card to create a grey box with rounded edges and taller height -->
      <div class="card bg-light rounded taller-box">
        <div class="p-5">
        <h2 class="text-center heading-font">Create Teams</h2>
        <form
          id="createTeamForm"
          action="/create-teams"
          method="POST"
          enctype="multipart/form-data"
          class="large-font"
        >
          <!-- Form group for team name input -->
          <div class="form-group mx-5 my-4">
            <label for="teamName" class="form-label">Team Name</label>
            <input
              type="text"
              name="teamname"
              class="form-control"
              id="teamname"
              placeholder="Enter team name"
              pattern="[A-Za-z0-9 ]+"
              title="Please provide a valid name for the team (only letters, numbers, and spaces are allowed)"
            />
          </div>

          <!-- Form group for selecting a random number of students -->
          <div class="form-group mx-5 my-4">
            <label for="teamName" class="form-label">Number of Members</label>
            <div class="d-block">
              
              <input
                type="number"
                class="form-control d-inline w-50 ml-1 mr-1"
                id="teamNumber"
                placeholder="Enter Number of Members"
                min="1"
              />
              </div>

          <!-- Form group for selecting students -->
          <div class="form-group">
            <label for="students" class="form-label">List of Students (<span id="selectedCount">0</span> selected)</label>
            <input type="text" class="form-control mb-2" placeholder="Search for students" id="searchStudents" onkeyup="filterStudents()">
            <div id="checkboxGroup" class="checkbox-group">
              <% if (StudentArr.rows.length > 0) { %>
                <!--<form action="/create-teams" method="POST">-->
                  <!--<label for="teamname">Team Name:</label>
                  <input type="text" name="teamname" id="teamname" />-->
                  <table>
                      <tr>
                          <th>Student Name</th>
                          <th>Student ID</th>
                          <th>Enroll</th>
                      </tr>
                      <% for (var i = 0; i < StudentArr.rows.length; i++) { %>
                          <tr>
                              <td><label for="student_<%= StudentArr.rows[i].name %>"><%= StudentArr.rows[i].name %></label></td>
                              <td><%= StudentArr.rows[i].id %></td>
                              <td><input type="checkbox" name="studentIDs" value="<%= StudentArr.rows[i].id %>">
                              </td>
                          </tr>
                      <% } %>
                  </table>
              <% } else { %>
                <div>No students found</div>
              <% } %>
            </div>
            <button
              type="button"
              class="btn btn-outline-danger mt-2 d-inline"
              onclick="uncheckSelectedStudents()">
              Uncheck Selection
            </button>
            <button
            type="button"
            class="btn btn-outline-success mt-2 d-inline mr-2"
            onclick="selectRandomStudents()">
            Select Random Students
          </button>
          
          <div
            id="notEnoughStudentsError"
            class="error-message"
            style="display: none; color: red"
          >
            Not enough students
          </div>
        </div>
        
            <!-- Error message for no students selected -->
            <div
              id="studentsError"
              class="error-message"
              style="display: none; color: red"
            >
              Please assign students to the team
            </div>
          </div>

          <!-- CSV upload option -->
          <div class="form-group m-5">
            <label for="csvfile">Upload CSV File (Optional):</label>
            <input type="file" name="csvfile" id="csvfile" accept=".csv" />
          </div>

          <!-- Confirmation message -->
          <div id="confirmationMessage" style="display: none">
            Team created successfully!
          </div>

          <!-- Submit button -->
          <button
            type="submit"
            class="btn btn-primary btn-submit mt-3 m-5 mb-2"
          >
            Submit
          </button>
        </form>
      </div>
    </div>
  </div>
</div>
</div>

<script>
  // Function to filter students based on search input
  function filterStudents() {
    const searchInput = document
      .getElementById("searchStudents")
      .value.toLowerCase();
    const checkboxes = document
      .getElementById("checkboxGroup")
      .querySelectorAll("div");

    checkboxes.forEach((checkbox) => {
      const label = checkbox.querySelector("label").innerText.toLowerCase();
      checkbox.style.display = label.includes(searchInput) ? "" : "none";
    });
  }

  // Function to update the count of selected students
  function updateSelectedCount() {
    const selectedCount = document.querySelectorAll(
      "#checkboxGroup input:checked"
    ).length;
    document.getElementById("selectedCount").innerText = selectedCount;
  }

  // Function to randomly select the specified number of students
  function selectRandomStudents() {
    const teamNumber = parseInt(
      document.getElementById("teamNumber").value,
      10
    );
    const checkboxes = document.querySelectorAll("#checkboxGroup input");
    const uncheckedBoxes = Array.from(checkboxes);

    // Uncheck all students first
    uncheckedBoxes.forEach((box) => (box.checked = false));

    if (
      isNaN(teamNumber) ||
      teamNumber < 1 ||
      teamNumber > uncheckedBoxes.length
    ) {
      document.getElementById("notEnoughStudentsError").style.display = "block";
      return;
    } else {
      document.getElementById("notEnoughStudentsError").style.display = "none";
    }

    // Shuffle the checkboxes and select the specified number of students
    uncheckedBoxes.sort(() => Math.random() - 0.5);
    uncheckedBoxes.slice(0, teamNumber).forEach((box) => (box.checked = true));

    // Update the selected count
    updateSelectedCount();
  }

  // Function to uncheck all selected students
  function uncheckSelectedStudents() {
    const checkboxes = document.querySelectorAll(
      "#checkboxGroup input:checked"
    );
    checkboxes.forEach((box) => (box.checked = false));

    // Update the selected count
    updateSelectedCount();
  }

  // Function to validate the form inputs
  function validateForm() {
    const teamName = document.getElementById("teamName").value;
    const checkedStudents = document.querySelectorAll(
      "#checkboxGroup input:checked"
    );
    const selectedStudents = Array.from(checkedStudents).map(
      (input) => input.value
    );

    // Check if team name is provided
    if (!teamName) {
      document.getElementById("teamNameError").style.display = "block";
    } else {
      document.getElementById("teamNameError").style.display = "none";
    }

    // Check if at least one student is selected
    if (selectedStudents.length === 0) {
      document.getElementById("studentsError").style.display = "block";
    } else {
      document.getElementById("studentsError").style.display = "none";
    }

    // If validation passes, show confirmation message
    if (teamName && selectedStudents.length > 0) {
      const confirmationMessage = document.getElementById(
        "confirmationMessage"
      );
      confirmationMessage.style.display = "block";

      // Hide the message after 3 seconds
      setTimeout(() => {
        confirmationMessage.style.display = "none";
      }, 3000);
    }
  }

  // // Disable the submit button if no students are available
  // document.addEventListener("DOMContentLoaded", function() {
  //       document.querySelector('button[type="submit"]').disabled = true;
  // });

  // Handle empty team name input
  document.addEventListener("DOMContentLoaded", function () {
    const teamNameInput = document.getElementById("teamname");

    // Listen for the 'input' event to reset the message once the user starts typing
    teamNameInput.addEventListener("input", function () {
      teamNameInput.setCustomValidity("");
    });

    // Listen for the 'invalid' event to set the custom message
    teamNameInput.addEventListener("invalid", function () {
      if (!teamNameInput.validity.valid) {
        teamNameInput.setCustomValidity("Please provide a name for the team");
      }
    });
  });
</script>
<%- include('partials/footer') %>
